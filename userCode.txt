"var BinarySearchTree = function(value) {\n  var node = {};\n  node.value = value;\n  node.left = null;\n  node.right = null;\n  node.insert = binarySearchTreeMethods.insert;\n  node.contains = binarySearchTreeMethods.contains;\n  node.depthFirstLog = binarySearchTreeMethods.depthFirstLog;\n  return node;\n};\n\nvar binarySearchTreeMethods = {};\n// O(log(n))\nbinarySearchTreeMethods.insert = function (newValue) {\n  var act = function (side) {\n    if (side === null) {\n      var newNode = BinarySearchTree(newValue);\n      return newNode;\n    } else {\n      side.insert(newValue);\n      return side;\n    }\n  };\n  if (newValue < this.value ) {\n    this.left = act(this.left);\n  } else {\n    this.right = act(this.right);\n  }\n};\n// O(log(n))\nbinarySearchTreeMethods.contains = function (target) {\n  if (this.value === target) {\n    return true;\n  }\n  var findOnSide = function (side) {\n    if (side === null) {\n      return false;\n    } else {\n      return side.contains(target);\n    }\n  };\n  if (target < this.value) {\n    return findOnSide(this.left);\n  } else {\n    return findOnSide(this.right);\n  }\n};\n// O(n)\nbinarySearchTreeMethods.depthFirstLog = function (func) {\n  func(this.value);\n  if (this.left !== null) {\n    this.left.depthFirstLog(func);\n  }\n  if (this.right !== null) {\n    this.right.depthFirstLog(func);\n  }\n};\n"